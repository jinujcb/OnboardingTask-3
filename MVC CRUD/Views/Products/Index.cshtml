@model MVC_CRUD.Models.Product
@{
    ViewBag.Title = "Index";
}


<body>
    <br />
    <h2>Product Details</h2>
    <br />

    <a href="#" class="btn btn-primary" data-bind="click: create" margin-left=12px>Add New Product</a>
    <br />
    <br />
    <table id="ProductTable" class="table table-striped table-bordered" style="width:25%;margin-left:12px">

        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Action(Edit)</th>
                <th>Action(Delete)</th>
            </tr>
        </thead>

        <tbody id="SetProductList" data-bind="foreach: products">

            <tr>

                <td class="Name" id="cname" data-bind="text: Name"></td>
                <td class="Price" id="cprice" data-bind="text: Price"></td>
                <td>
                    <a class="btn btn-warning btn-sm " data-bind="click: edit , attr: {'id' : ID} " style="color:white; margin-left:10px"><i class="fa fa-pencil "></i> Edit</a>
                </td>
                <td>
                    <a class="btn btn-danger btn-sm " data-bind="click: del , attr: {'id' : ID} " style="color:white; margin-left:10px"><i class="fa fa-pencil "></i> Delete</a>

                </td>
            </tr>

        </tbody>

    </table>


    @using (Html.BeginForm())
    {
        <div id="Modal" class=" modal fade Modal">
            <div class="modal-dialog">
                <div class="modal-content">
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h3 class="modal-title" id="m_Title" style="margin-right:20px"></h3>
                        @Html.ActionLink("x", "Index", "Products", new { @class = "close" })
                    </div>

                    <div class="modal-body">
                        @Html.Label("Name")
                        <br />
                        @Html.TextBoxFor(model => model.Name, htmlAttributes: new { data_bind = "textInput: Name, valueUpdate: 'afterkeydown'" })
                        @Html.ValidationMessageFor(model => model.Name, null, new { @class = "text-danger" })

                        <br />
                        <br />
                        @Html.Label("Price")
                        <br />
                        @Html.TextBoxFor(model => model.Price, htmlAttributes: new { data_bind = "textInput: Price, valueUpdate: 'afterkeydown'" })
                        @Html.ValidationMessageFor(model => model.Price, null, new { @class = "text-danger" })
                        <br />
                    </div>
                    <div class="modal-footer">
                        <input type="submit" value="Save" class="btn btn-primary" id="btnSubmit" />
                        @Html.ActionLink("Close", "Index", "Products", new { @class = "btn btn-danger" })

                    </div>
                </div>
            </div>
        </div>
    }

    </body>
@section scripts{
   
    <script>

        $(document).ready(function () {

            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                messageTemplate: null,
                errorClass: 'text-danger'
            }, true);


            function viewModel() {
                var self = this;
                self.ID = ko.observable();
                self.Name = ko.observable();
                self.Price = ko.observable();
                self.products = ko.observableArray([]);//save data function };


                var viewModelvalidate1 = ko.validatedObservable([
                    self.Name = ko.observable().extend({ required: { message: '*' } }),
                ]);//validate object of viewmodel....cannot make two different models and bind hence following this method

                var viewModelvalidate2 = ko.validatedObservable([
                    self.Price = ko.observable().extend({ required: { message: '*' } }),
                ]);//Second viewmodel included to display error message separately

                $.ajax({
                    type: "GET",
                    url: "/Products/GetAllProducts",
                    success: function (data) {
                        self.products(data);
                    }
                })//to display all customers in the table
              
                $("#btnSubmit").on("click", function (ev) {

                    var current = {
                        Name: $("#Name").val(),
                        Price: $("#Price").val(),
                    }

                    if (current.Name === '') {
                        viewModelvalidate1.errors.showAllMessages();
                    }
                    if (current.Price === '') {
                        viewModelvalidate2.errors.showAllMessages();
                    }


                    if ($('#m_Title').text() === "Create Record") {

                        $.ajax({
                            url: '/Products/Create',
                            method: 'POST',
                            data: { Name: current.Name, Price: current.Price },
                            success: function () {
                                location.reload();
                            },
                        })
                    }

                    else if ($('#m_Title').text() === "Edit Record") {

                        $.ajax({
                            url: '/Products/Edit',
                            method: 'POST',
                            data: { ID: Id, Name: current.Name, Price: current.Price },
                            success: function () {
                                location.reload();
                            },
                        })

                    }

                });//in order to check validation submit is added inside viewmodel

            }


            self.create = function () {
                $('#Modal').modal({ show: true });
                $('#m_Title').text("Create Record");
            };

            self.edit = function (data, event) {

                Id = event.target.id;

                $.ajax({
                    url: '/Products/GetProduct',
                    method: 'GET',
                    data: { ID: Id },
                    success: function (data) {
                        ID = data.ID,
                        Name = data.Name,
                        Price = data.Price;
                        return true;
                    },

                })

                $('#Modal').modal({ show: true });
                $('#m_Title').text("Edit Record");
                $(".modal-body #Name").val(data.Name);
                $(".modal-body #Price").val(data.Price);

            };
            self.del = function (data, event) {

                Id = event.target.id;

                $.ajax({
                    url: '/Products/GetProduct',
                    method: 'GET',
                    data: { ID: Id },
                    success: function (data) {
                    Name = data.Name,
                    Price = data.Price;
                    },

                })
                bootbox.confirm("Are you sure you want to delete?", function (result)//jquery library that has inbuit modals, added in layout and bundle only .js file
                {
                    console.log('This was logged in the callback: ' + result);
                    if (result) {
                        var delete_confirm = true;
                        console.log("true");
                        $.ajax({
                            url: '/Products/Delete',
                            method: 'POST',
                            data: { ID: Id },
                            success: function () {
                                location.reload();
                                return true;
                            },
                            error: function () {

                                location.reload();
                            }

                        })
                    }
                    else {
                        var delete_confirm = false;
                        location.reload();
                    }
                });

            };
            ko.applyBindings(new viewModel());
        });//document


    </script>
}

